import {
  ControlsContainer,
  FullScreenControl,
  SigmaContainer,
  ZoomControl,
  useLoadGraph,
  useRegisterEvents,
  useSetSettings,
  useSigma,
} from "@react-sigma/core";
import { MultiDirectedGraph } from "graphology";
import { circular } from "graphology-layout";
import { type Attributes } from "graphology-types";
import { useEffect, useState } from "react";
import { type VulnerabilityGraph } from "root/src/modules/AuditReport/Parser/types";
import { type Vulnerability } from "root/src/modules/AuditReport/Validator/schema";
import { type Sigma } from "sigma";
import { type NodeDisplayData } from "sigma/types";
import { COLORS, SEVERITY_COLOR_MAP } from "src/constants";
import GraphLegend from "./GraphLegend";
import "./index.css";

type GraphComponentProps = {
  data: VulnerabilityGraph;
};

export default function GraphComponent(props: GraphComponentProps) {
  const { data } = props;

  return (
    <SigmaContainer
      style={{ width: "100%", height: "1024px", borderRadius: "4px" }}
      settings={{
        allowInvalidContainer: true,
        defaultEdgeColor: COLORS.black,
      }}
    >
      <GraphContainer data={data} />
      <ControlsContainer position={"bottom-right"}>
        <ZoomControl />
        <FullScreenControl />
      </ControlsContainer>
      <GraphLegend />
    </SigmaContainer>
  );
}

type GraphContainerProps = {
  data: VulnerabilityGraph;
};

const GraphContainer = (props: GraphContainerProps) => {
  const { data } = props;
  const sigma = useSigma();
  const registerEvents = useRegisterEvents();
  const setSettings = useSetSettings();
  const loadGraph = useLoadGraph();
  const [hoveredNode, setHoveredNode] = useState<string | null>(null);
  const [previouslyHoveredNode, setPreviouslyHoveredNode] = useState<
    string | null
  >(null);

  useEffect(() => {
    const graph = new MultiDirectedGraph({ allowSelfLoops: true });
    graph.import(data);
    circular.assign(graph);
    loadGraph(graph);
    registerEvents({
      enterNode: (event) => {
        setPreviouslyHoveredNode(null);
        setHoveredNode(event.node);
      },
      leaveNode: (event) => {
        setHoveredNode(null);
        setPreviouslyHoveredNode(event.node);
      },
    });
  }, [loadGraph, data, registerEvents]);

  useEffect(() => {
    setSettings({
      nodeReducer: nodeReducer({ sigma, hoveredNode, previouslyHoveredNode }),
      edgeReducer: edgeReducer({ sigma, hoveredNode }),
    });
  }, [hoveredNode, setSettings, sigma, previouslyHoveredNode]);

  return null;
};

type NodeReducerContext = {
  sigma: Sigma;
  hoveredNode: string | null;
  previouslyHoveredNode: string | null;
};

const nodeReducer =
  (context: NodeReducerContext) =>
  (node: string, data: Attributes): Partial<NodeDisplayData> => {
    const { sigma, hoveredNode, previouslyHoveredNode } = context;

    const graph = sigma.getGraph();

    const vulnerability = data.vulnerability as unknown as Vulnerability;

    const newNodeData: Attributes = {
      ...data,
      highlighted: Boolean(data.highlighted) || false,
    };

    if (hoveredNode && node === hoveredNode) {
      newNodeData.highlighted = true;
      newNodeData.size = data.size * 2;
      newNodeData.color = SEVERITY_COLOR_MAP[vulnerability.severity];

      for (const outboundEdge of graph.outboundEdges(hoveredNode)) {
        graph.setEdgeAttribute(outboundEdge, "color", COLORS.purple);
      }

      for (const inboundEdge of graph.inboundEdges(hoveredNode)) {
        graph.setEdgeAttribute(inboundEdge, "color", COLORS.blue);
      }
    } else if (hoveredNode && graph.neighbors(hoveredNode).includes(node)) {
      newNodeData.highlighted = true;
      newNodeData.size = data.size * 2;
      newNodeData.color = getNeighboringNodeColor(data, hoveredNode);
    } else {
      newNodeData.highlighted = false;
      newNodeData.color =
        hoveredNode !== null
          ? COLORS.grey
          : SEVERITY_COLOR_MAP[vulnerability.severity];

      if (previouslyHoveredNode) {
        for (const outboundEdge of graph.outboundEdges(previouslyHoveredNode)) {
          graph.setEdgeAttribute(outboundEdge, "color", COLORS.black);
        }

        for (const inboundEdge of graph.inboundEdges(previouslyHoveredNode)) {
          graph.setEdgeAttribute(inboundEdge, "color", COLORS.black);
        }
      }
    }

    return newNodeData;
  };

const getNeighboringNodeColor = (data: Attributes, hoveredNode: string) => {
  const vulnerability = data.vulnerability as unknown as Vulnerability;

  if (vulnerability.via.includes(hoveredNode)) {
    return COLORS.blue;
  }

  return COLORS.purple;
};

type EdgeReducerContext = {
  sigma: Sigma;
  hoveredNode: string | null;
};

const edgeReducer =
  (context: EdgeReducerContext) => (edge: string, data: Attributes) => {
    const { sigma, hoveredNode } = context;
    const graph = sigma.getGraph();
    const newEdgeData: Attributes = { ...data, hidden: false };

    if (hoveredNode && !graph.extremities(edge).includes(hoveredNode)) {
      newEdgeData.hidden = true;
    }

    return newEdgeData;
  };
