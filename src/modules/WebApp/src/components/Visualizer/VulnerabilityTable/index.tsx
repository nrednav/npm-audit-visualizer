import clsx from "clsx";
import { useState } from "react";
import { VulnerabilityTable } from "root/src/modules/AuditReport/Parser/types";
import {
  Vulnerability,
  VulnerabilitySchema,
} from "root/src/modules/AuditReport/Validator/schema";
import { ValueOf } from "root/src/shared/types";

type TableComponentProps = {
  data: VulnerabilityTable;
};

export default function TableComponent(props: TableComponentProps) {
  const { data } = props;
  const [pageNumber, setPageNumber] = useState(0);
  const hiddenColumns = ["id"];
  const colCount =
    Object.keys(VulnerabilitySchema.shape).length - hiddenColumns.length;

  return (
    <div className="my-4 | overflow-x-auto shadow rounded-lg">
      <table className="table-auto overflow-scroll min-w-full divide-y divide-slate-200">
        <TableHeader hiddenColumns={hiddenColumns} />
        <TableBody
          data={data}
          pageNumber={pageNumber}
          hiddenColumns={hiddenColumns}
        />
        <TableFooter>
          <TablePagination
            rowCount={data.length}
            colCount={colCount}
            currentPage={pageNumber}
            onPageChanged={setPageNumber}
          />
        </TableFooter>
      </table>
    </div>
  );
}

type TableHeaderProps = {
  hiddenColumns: string[];
};

const TableHeader = (props: TableHeaderProps) => {
  const { hiddenColumns } = props;

  const columnHeadings = Object.keys(VulnerabilitySchema.shape).map(
    (heading) => {
      if (hiddenColumns.includes(heading)) return;

      return (
        <th
          key={heading}
          scope="col"
          className="p-4 text-left capitalize font-semibold text-slate-800"
        >
          {heading}
        </th>
      );
    },
  );

  return (
    <thead className="bg-slate-50 shadow-inner shadow-slate-300">
      <tr className="divide-x divide-slate-200">{columnHeadings}</tr>
    </thead>
  );
};

type TableBodyProps = {
  data: VulnerabilityTable;
  pageNumber: number;
  hiddenColumns: string[];
};

const TableBody = (props: TableBodyProps) => {
  const { data, pageNumber, hiddenColumns } = props;

  const rows = data
    .slice(pageNumber * 16, pageNumber * 16 + 16)
    .map((vulnerability) => {
      const columns = [];

      for (const [key, value] of Object.entries(vulnerability)) {
        if (hiddenColumns.includes(key)) continue;

        columns.push(
          <TableColumn key={`${key}-${vulnerability.id}`} data={value} />,
        );
      }

      return <TableRow key={`row-${vulnerability.id}`} columns={columns} />;
    });

  return <tbody className="divide-y divide-slate-200 bg-white">{rows}</tbody>;
};

type TableRowProps = {
  columns: JSX.Element[];
  className?: string;
};

const TableRow = (props: TableRowProps) => {
  const { columns, className } = props;

  return (
    <tr
      className={clsx(
        "even:bg-slate-50 hover:bg-slate-200 divide-x divide-slate-200 hover:divide-slate-300",
        className,
      )}
    >
      {columns}
    </tr>
  );
};

type TableColumnProps = {
  data: ValueOf<Vulnerability>;
  className?: string;
};

const TableColumn = (props: TableColumnProps) => {
  const { data, className } = props;

  let dataElement: React.ReactNode;

  switch (typeof data) {
    case "string":
      dataElement = data;
      break;
    case "number":
    case "boolean":
      dataElement = String(data);
      break;
    case "object":
      if (Array.isArray(data)) {
        dataElement = data
          .map((item) => {
            switch (typeof item) {
              case "string":
              case "number":
              case "boolean":
                return String(item);
              case "object":
                return String(item.name);
              default:
                return String(item);
            }
          })
          .map((item, index) => {
            return <li key={String(item + index)}>{item}</li>;
          });
      }
      break;
    default:
      dataElement = JSON.stringify(data);
      break;
  }

  return (
    <td className={clsx("p-4 list-inside text-slate-600", className)}>
      {dataElement}
    </td>
  );
};

type TableFooterProps = {
  children: React.ReactNode;
};

const TableFooter = (props: TableFooterProps) => {
  return <tfoot>{props.children}</tfoot>;
};

type TablePaginationProps = {
  rowCount: number;
  colCount: number;
  currentPage: number;
  onPageChanged: (pageNumber: number) => void;
};

const TablePagination = (props: TablePaginationProps) => {
  const { rowCount, colCount, currentPage, onPageChanged } = props;
  const pageCount = Math.ceil(rowCount / 16);
  const pageButtons = [...Array(pageCount).keys()].map((pageNumber) => {
    return (
      <button
        type="button"
        className={clsx(
          "px-2",
          pageNumber === currentPage && "underline font-bold",
        )}
        key={pageNumber}
        onClick={() => onPageChanged(pageNumber)}
      >
        {pageNumber + 1}
      </button>
    );
  });

  return (
    <tr>
      <td className="p-2" colSpan={colCount}>
        <div className="w-full | flex justify-center items-center">
          {pageButtons}
        </div>
      </td>
    </tr>
  );
};
